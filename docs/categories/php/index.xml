<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on Error Logs</title>
    <link>https://errlogs.com/categories/php/</link>
    <description>Recent content in Php on Error Logs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 06 Dec 2018 16:37:35 +0800</lastBuildDate>
    
	<atom:link href="https://errlogs.com/categories/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHP 7 错误处理</title>
      <link>https://errlogs.com/post/php/php7-errors/</link>
      <pubDate>Thu, 06 Dec 2018 16:37:35 +0800</pubDate>
      
      <guid>https://errlogs.com/post/php/php7-errors/</guid>
      <description>&lt;p&gt;相较于 PHP 5, PHP 7 改变了大多数错误的报告方式，其将错误作为 &lt;strong&gt;Error&lt;/strong&gt; 异常抛出。&lt;/p&gt;

&lt;p&gt;因为 &lt;strong&gt;Error&lt;/strong&gt; 并非继承自 &lt;strong&gt;Exception&lt;/strong&gt;，如果你的运行环境混杂着 PHP 5 和 PHP 7 时，需要两个 &lt;code&gt;catch&lt;/code&gt; 块。&lt;/p&gt;

&lt;p&gt;有意思的是 &lt;strong&gt;Error&lt;/strong&gt; 和 &lt;strong&gt;Exception&lt;/strong&gt; 均实现了 &lt;strong&gt;Throwable&lt;/strong&gt; 接口，但是如果仅用以下异常处理代码在 PHP 5 下并不起作用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;try {
    // ...
} catch (\Throwable $t) {
    echo $t-&amp;gt;getMessage() . PHP_EOL;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;兼容-php-5&#34;&gt;兼容 PHP 5&lt;/h2&gt;

&lt;p&gt;所以如果要兼容 PHP 5，我们还需要添加 &lt;strong&gt;Exception&lt;/strong&gt; 的 catch 块：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP PDO 持久连接的一些思考和实践</title>
      <link>https://errlogs.com/post/php/pdo-persistent-connection/</link>
      <pubDate>Thu, 29 Nov 2018 16:16:37 +0800</pubDate>
      
      <guid>https://errlogs.com/post/php/pdo-persistent-connection/</guid>
      <description>&lt;p&gt;最近查阅 PHP 官方的 &lt;a href=&#34;http://php.net/manual/zh/book.pdo.php&#34;&gt;PDO 文档&lt;/a&gt;，
在 &lt;a href=&#34;http://php.net/manual/zh/pdo.connections.php&#34;&gt;连接与连接管理&lt;/a&gt; 发现个有趣的配置：持久化连接。
这一看，感觉像似连接池的东西，脑海中一下子就浮现好几个问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;持久连接不是可以减少建立数据库连接所产生的消耗，以到达复用连接，提高性能的目的吗，为啥没有默认设置呢？&lt;/li&gt;
&lt;li&gt;持久连接可以设置最大连接数吗？&lt;/li&gt;
&lt;li&gt;是否存在事务和死锁问题呢？若有应该如何避免呢？&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;


&lt;img
    src=&#34;https://errlogs.com/img/emoji/caught-my-attention.jpg&#34;
    title=&#34;caught-my-attention&#34;
    alt=&#34;caught-my-attention&#34;
    
    
/&gt;</description>
    </item>
    
    <item>
      <title>PHP pthreads 多线程扩展安装教程</title>
      <link>https://errlogs.com/post/php/pthreads-installation/</link>
      <pubDate>Thu, 29 Nov 2018 15:25:53 +0800</pubDate>
      
      <guid>https://errlogs.com/post/php/pthreads-installation/</guid>
      <description>&lt;p&gt;本文阐述如何在 Linux 下安装 PHP 的多线程扩展 - &lt;a href=&#34;http://php.net/manual/en/book.pthreads.php&#34;&gt;pthreads&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 编译安装详解</title>
      <link>https://errlogs.com/post/php/compile/</link>
      <pubDate>Thu, 29 Nov 2018 13:21:28 +0800</pubDate>
      
      <guid>https://errlogs.com/post/php/compile/</guid>
      <description>&lt;p&gt;前段时间，想尝试下 PHP 的多线程扩展 &lt;a href=&#34;http://php.net/manual/zh/book.pthreads.php&#34;&gt;pthreads&lt;/a&gt;，由于其要求 PHP 启用 ZTS （Zend Thread Safety），
但是笔者所使用的发行版所能安装的 PHP 包都是 non-zts 的，所以只能自行编译和安装 PHP 了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;题外话，貌似基本大多数 Linux 发行版的 PHP 包都是 non-zts 的，比如 Ubuntu、CentOS、Arch Linux 等。
不过据我所知，Arch Linux AUR 有 ZTS 版本的 PHP，传送门可在本文底部&lt;a href=&#34;#相关链接&#34;&gt;相关链接&lt;/a&gt;找到。
另外 Gentoo 的话，PHP 默认是 ZTS 的。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>PHP 多进程编程 - 入门</title>
      <link>https://errlogs.com/post/php/pcntl/</link>
      <pubDate>Thu, 11 Oct 2018 09:58:47 +0800</pubDate>
      
      <guid>https://errlogs.com/post/php/pcntl/</guid>
      <description>&lt;p&gt;本文将简述如何快速了解 PHP 的多进程编程，并提供实验脚本。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>